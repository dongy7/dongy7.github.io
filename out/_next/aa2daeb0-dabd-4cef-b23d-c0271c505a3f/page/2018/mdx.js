module.exports=__NEXT_REGISTER_PAGE("/2018/mdx",function(){var e=webpackJsonp([8],{248:function(e,n,t){e.exports=t(82)},82:function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:true});var a=t(0);var o=t.n(a);var r=t(16);var m=t.n(r);n["default"]=function(e){var n=e.components;return o.a.createElement(r["MDXTag"],{name:"wrapper"},o.a.createElement(r["MDXTag"],{name:"p",components:n},"The ",o.a.createElement(r["MDXTag"],{name:"a",components:n,parentName:"p",props:{href:"https://nextjs.org/"}},"Next")," framework is great for creating websites with ",o.a.createElement(r["MDXTag"],{name:"a",components:n,parentName:"p",props:{href:"https://reactjs.org/"}},"React"),". In fact this ",o.a.createElement(r["MDXTag"],{name:"a",components:n,parentName:"p",props:{href:"https://github.com/dongy7/dongy7.github.io"}},"blog")," is built with Next. But one thing that I have missed about using static site frameworks such as ",o.a.createElement(r["MDXTag"],{name:"a",components:n,parentName:"p",props:{href:"https://jekyllrb.com/"}},"Jekyll")," is the abillity to write content in Markdown. JSX syntax is nice for defining declarative components, but can be awkward to use when mixed with text. Here is an example from one of my previous posts written with JSX:"),o.a.createElement(r["MDXTag"],{name:"pre",components:n},o.a.createElement(r["MDXTag"],{name:"code",components:n,parentName:"pre"},"<P>\n  We can see that the data that we're actually interested in, which are the <Code>ids</Code> of\n  the articles is in the <Code>response</Code> field of the object. Since we are only interested\n  in the <Code>response</Code> field, we can use the <Code>map</Code> operator:\n</P>\n")),o.a.createElement(r["MDXTag"],{name:"p",components:n},"As you can see JSX introduces some unnautrual breaks in the text and is just hard to write even with editor integration for JSX. In comparison, the following is an equivalent markdown version:"),o.a.createElement(r["MDXTag"],{name:"pre",components:n},o.a.createElement(r["MDXTag"],{name:"code",components:n,parentName:"pre"},"We can see that the data that we're actually interested in, which are the `ids` of the articles\nis in the `response` field of the object. Since we are only interested in the `response` field,\nwe can use the `map` operator:\n")),o.a.createElement(r["MDXTag"],{name:"p",components:n},"Markdown feels much better to write for things like blog posts where the majority of the content is text. But how do we integrate Markdown with JSX? Fortunately, we can use the ",o.a.createElement(r["MDXTag"],{name:"a",components:n,parentName:"p",props:{href:"https://github.com/mdx-js/mdx"}},"MDX")," library to render JSX in Markdown. First install the ",o.a.createElement(r["MDXTag"],{name:"inlineCode",components:n,parentName:"p"},"MDX")," library:"),o.a.createElement(r["MDXTag"],{name:"pre",components:n},o.a.createElement(r["MDXTag"],{name:"code",components:n,parentName:"pre"},"npm install --save-dev @mdx-js/loader @mdx-js/mdx\n")),o.a.createElement(r["MDXTag"],{name:"p",components:n},"or if you use ",o.a.createElement(r["MDXTag"],{name:"a",components:n,parentName:"p",props:{href:"https://yarnpkg.com/en/"}},"Yarn"),":"),o.a.createElement(r["MDXTag"],{name:"pre",components:n},o.a.createElement(r["MDXTag"],{name:"code",components:n,parentName:"pre"},"yarn add --dev @mdx-js/loader @mdx-js/mdx\n")),o.a.createElement(r["MDXTag"],{name:"p",components:n},"If you are using ",o.a.createElement(r["MDXTag"],{name:"inlineCode",components:n,parentName:"p"},"Next"),", add this to your ",o.a.createElement(r["MDXTag"],{name:"inlineCode",components:n,parentName:"p"},"next.config.js")," so that the ",o.a.createElement(r["MDXTag"],{name:"inlineCode",components:n,parentName:"p"},"MDX")," loader is used to load ",o.a.createElement(r["MDXTag"],{name:"inlineCode",components:n,parentName:"p"},"jsx")," and ",o.a.createElement(r["MDXTag"],{name:"inlineCode",components:n,parentName:"p"},"md")," files."),o.a.createElement(r["MDXTag"],{name:"pre",components:n},o.a.createElement(r["MDXTag"],{name:"code",components:n,parentName:"pre"},"module.exports = {\n  pageExtensions: ['js', 'jsx', 'md', 'mdx'],\n  webpack: (config, { defaultLoaders }) => {\n    config.module.rules.push({\n      test: /.md$/,\n      use: [\n        defaultLoaders.babel,\n        {\n          loader: '@mdx-js/loader'\n        }\n      ]\n    })\n\n    return config\n  }\n}\n")),o.a.createElement(r["MDXTag"],{name:"p",components:n},"If you are using ",o.a.createElement(r["MDXTag"],{name:"inlineCode",components:n,parentName:"p"},"webpack"),", then specify the ",o.a.createElement(r["MDXTag"],{name:"inlineCode",components:n,parentName:"p"},"MDX")," loader as follows:"),o.a.createElement(r["MDXTag"],{name:"pre",components:n},o.a.createElement(r["MDXTag"],{name:"code",components:n,parentName:"pre"},"module.exports = {\n  module: {\n    rules: [\n      {\n        test: /.md$/,\n        use: ['babel-loader', '@mdx-js/loader']\n      }\n    ]\n  }\n}\n")),o.a.createElement(r["MDXTag"],{name:"p",components:n},"Next, compose your content and save it to a ",o.a.createElement(r["MDXTag"],{name:"inlineCode",components:n,parentName:"p"},"markdown")," file and just import it and use it like a normal React compnent:"),o.a.createElement(r["MDXTag"],{name:"pre",components:n},o.a.createElement(r["MDXTag"],{name:"code",components:n,parentName:"pre"},"import MyBlogPost from './MyBlogPost.md'\n\nexport default () =>\n  <MyBlogPost />\n")),o.a.createElement(r["MDXTag"],{name:"p",components:n},"If you are like me and have defined custom React components for things like code snippets, you can specify them through the ",o.a.createElement(r["MDXTag"],{name:"inlineCode",components:n,parentName:"p"},"components")," prop:"),o.a.createElement(r["MDXTag"],{name:"pre",components:n},o.a.createElement(r["MDXTag"],{name:"code",components:n,parentName:"pre"},"import MyBlogPost from './MyBlogPost.md'\nimport Snippet from '../components/Snippet'\n\nexport default () =>\n  <MyBlogPost\n    components={{\n      code: Snippet\n    }}\n  />\n")),o.a.createElement(r["MDXTag"],{name:"p",components:n},"That's all you need to do in order to start writing content in Markdown for your React powered websites! If you want to learn more about ",o.a.createElement(r["MDXTag"],{name:"inlineCode",components:n,parentName:"p"},"MDX"),", I encourage you to check out the ",o.a.createElement(r["MDXTag"],{name:"a",components:n,parentName:"p",props:{href:"https://github.com/mdx-js/mdx"}},"MDX project page"),"."))}}},[248]);return{page:e.default}});